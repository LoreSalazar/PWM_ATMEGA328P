
PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000140  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000ec  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000140  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000170  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000695  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000607  00000000  00000000  00000865  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000023b  00000000  00000000  00000e6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000010a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000034e  00000000  00000000  000010cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  0000141a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 74 00 	jmp	0xe8	; 0xe8 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
int main(void)
{
	int frequency = 100;
	int dutyCicle = 50;
	
    DDRD |= (1<<6); //Se establece como salida el pin 6 del puerto D
  80:	8a b1       	in	r24, 0x0a	; 10
  82:	80 64       	ori	r24, 0x40	; 64
  84:	8a b9       	out	0x0a, r24	; 10
	//----------------------------------- FAST PWM -----------------------------------
	//COM0An
	//Compare Output Mode, Fast PWM: Normal port operation, OC0A disconnected
	TCCR0A |= (1<<COM0A1); //Clear OC0A on Compare Match, set OC0A at BOTTOM (non-inverting mode)
  86:	84 b5       	in	r24, 0x24	; 36
  88:	80 68       	ori	r24, 0x80	; 128
  8a:	84 bd       	out	0x24, r24	; 36
	TCCR0A &=~ (1<<COM0A0);  
  8c:	84 b5       	in	r24, 0x24	; 36
  8e:	8f 7b       	andi	r24, 0xBF	; 191
  90:	84 bd       	out	0x24, r24	; 36
	
	//Compare Output Mode for channel B: Normal port operation, OC0B disconnected
	TCCR0A |= (1<<COM0B1); // Clear OC0B on Compare Match, set OC0B at BOTTOM, (non-inverting mode)
  92:	84 b5       	in	r24, 0x24	; 36
  94:	80 62       	ori	r24, 0x20	; 32
  96:	84 bd       	out	0x24, r24	; 36
	TCCR0A &=~ (1<<COM0B0);
  98:	84 b5       	in	r24, 0x24	; 36
  9a:	8f 7e       	andi	r24, 0xEF	; 239
  9c:	84 bd       	out	0x24, r24	; 36
	
	//Wareform Generation Mode: Fast PWM
	TCCR0A |= (1<<WGM01);
  9e:	84 b5       	in	r24, 0x24	; 36
  a0:	82 60       	ori	r24, 0x02	; 2
  a2:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1<<WGM00);
  a4:	84 b5       	in	r24, 0x24	; 36
  a6:	81 60       	ori	r24, 0x01	; 1
  a8:	84 bd       	out	0x24, r24	; 36
	//Wareform Generation Mode: Fast PWM
	TCCR0B &=~ (1<<WGM02);
  aa:	85 b5       	in	r24, 0x25	; 37
  ac:	87 7f       	andi	r24, 0xF7	; 247
  ae:	85 bd       	out	0x25, r24	; 37
	
	//Force Output Compare A
	TCCR0B &=~ (1<<FOC0A);
  b0:	85 b5       	in	r24, 0x25	; 37
  b2:	8f 77       	andi	r24, 0x7F	; 127
  b4:	85 bd       	out	0x25, r24	; 37
	//Force Output Compare B
	TCCR0B &=~ (1<<FOC0B);
  b6:	85 b5       	in	r24, 0x25	; 37
  b8:	8f 7b       	andi	r24, 0xBF	; 191
  ba:	85 bd       	out	0x25, r24	; 37
	
	//Clock Select Bit Description
	TCCR0B |= (1<<2); //256 clock
  bc:	85 b5       	in	r24, 0x25	; 37
  be:	84 60       	ori	r24, 0x04	; 4
  c0:	85 bd       	out	0x25, r24	; 37
	TCCR0B &=~ (1<<1);
  c2:	85 b5       	in	r24, 0x25	; 37
  c4:	8d 7f       	andi	r24, 0xFD	; 253
  c6:	85 bd       	out	0x25, r24	; 37
	TCCR0B &=~ (1<<0);
  c8:	85 b5       	in	r24, 0x25	; 37
  ca:	8e 7f       	andi	r24, 0xFE	; 254
  cc:	85 bd       	out	0x25, r24	; 37
	
	GTCCR &=~ (1<<TSM); //Writing the TSM bit to one activates the Timer/Counter Synchronization mode.
  ce:	83 b5       	in	r24, 0x23	; 35
  d0:	8f 77       	andi	r24, 0x7F	; 127
  d2:	83 bd       	out	0x23, r24	; 35
	GTCCR &=~ (1<<PSRASY); // When this bit is one, the Timer/Counter2 prescaler will be reset
  d4:	83 b5       	in	r24, 0x23	; 35
  d6:	8d 7f       	andi	r24, 0xFD	; 253
  d8:	83 bd       	out	0x23, r24	; 35
	GTCCR &=~ (1<<PSRSYNC); //When this bit is one, Timer/Counter1 and Timer/Counter0 prescaler will be Reset
  da:	83 b5       	in	r24, 0x23	; 35
  dc:	8e 7f       	andi	r24, 0xFE	; 254
  de:	83 bd       	out	0x23, r24	; 35

	TCNT0 = 0x0000; //Counter enable
  e0:	16 bc       	out	0x26, r1	; 38

	//ICR1 = (F_CPU/1024/100) -1; //
	OCR0A = (((F_CPU/256/frequency) -1)*dutyCicle)/100; //
  e2:	88 e3       	ldi	r24, 0x38	; 56
  e4:	87 bd       	out	0x27, r24	; 39
  e6:	ff cf       	rjmp	.-2      	; 0xe6 <main+0x66>

000000e8 <_exit>:
  e8:	f8 94       	cli

000000ea <__stop_program>:
  ea:	ff cf       	rjmp	.-2      	; 0xea <__stop_program>
